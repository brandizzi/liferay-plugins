<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
int count = 0;
String exceptionDatesString = StringPool.BLANK;
Frequency frequency = null;
int interval = 0;
java.util.Calendar untilJCalendar = startTimeJCalendar;
List<Weekday> weekdays = new ArrayList<Weekday>();

boolean afterChecked = false;
boolean onChecked = false;

if (recurrence != null) {
	count = recurrence.getCount();
	frequency = recurrence.getFrequency();
	interval = recurrence.getInterval();

	if (recurrence.getUntilJCalendar() != null) {
		untilJCalendar = recurrence.getUntilJCalendar();
	}

	weekdays = recurrence.getWeekdays();

	if (count > 0) {
		afterChecked = true;
	}

	if (recurrence.getUntilJCalendar() != null) {
		onChecked = true;
	}

	StringBundler sb = new StringBundler();

	List<java.util.Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars();

	Iterator<java.util.Calendar> iterator = exceptionJCalendars.iterator();

	while (iterator.hasNext()) {
		java.util.Calendar exceptionJCalendar = iterator.next();

		sb.append(exceptionJCalendar.getTimeInMillis());

		if (iterator.hasNext()) {
			sb.append(StringPool.COMMA);
		}
	}

	exceptionDatesString = sb.toString();
}
%>

<span class="calendar-portlet-recurrence-summary" id="<portlet:namespace />summary"></span>

<div class="calendar-portlet-recurrence-container" id="<portlet:namespace />recurrenceContainer">
	<aui:input name="exceptionDates" type="hidden" value="<%= exceptionDatesString %>" />

	<div class="calendar-portlet-recurrence-view calendar-portlet-frequency-view">
		<div class="calendar-portlet-recurrence-title">
			<liferay-ui:message key="repeats" />
		</div>
		<div class="calendar-portlet-recurrence-content">

			<aui:input checked="<%= frequency == null %>" label="never" name="frequency" selected="<%= Validator.isNull(frequency) %>"  type="radio" value="NEVER" />

			<%
			for (Frequency curFrequency : Frequency.values()) {
			%>

				<aui:input checked="<%= (frequency == curFrequency) %>"  label="<%= StringUtil.toLowerCase(curFrequency.getValue()) %>" name="frequency" type="radio" value="<%= curFrequency.getValue() %>" />

			<%
			}
			%>

		</div>
	</div>

	<div class="calendar-portlet-recurrence-view calendar-portlet-interval-view hide" id="<portlet:namespace />intervalContainer">
		<div class="calendar-portlet-recurrence-title">
			<liferay-ui:message key="repeat-every" />
		</div>
		<div class="calendar-portlet-recurrence-content">
			<aui:select label="" name="interval">

				<%
				for (int i = 1; i <= 30; i++) {
				%>

					<aui:option selected="<%= (interval == i) %>" value="<%= i %>"><%= i %></aui:option>

				<%
				}
				%>

			</aui:select>

			<span id="<portlet:namespace />intervalLabel"></span>

			<div class="calendar-portlet-interval-view <%= (frequency == Frequency.WEEKLY) ? "" : "hide" %>" id="<portlet:namespace />view<%= Frequency.WEEKLY %>">
				<liferay-ui:message key="on" />:
				<aui:field-wrapper inlineField="<%= true %>" label="">

					<%
					for (Weekday weekday : Weekday.values()) {
					%>

						<aui:input checked="<%= weekdays.contains(weekday) %>" data-weekday='<%= LanguageUtil.get(request, "weekday." + weekday.getValue()) %>' label="<%= weekday.getValue() %>" name="<%= weekday.getValue() %>" type="checkbox" />

					<%
					}
					%>

				</aui:field-wrapper>
			</div>
		</div>
	</div>

	<div class="calendar-portlet-recurrence-view calendar-portlet-limit-view hide" id="<portlet:namespace />limitContainer">
		<div class="calendar-portlet-recurrence-title">
			<liferay-ui:message key="until" />:
		</div>
		<div class="calendar-portlet-recurrence-content">
			<aui:field-wrapper cssClass="calendar-portlet-recurrence-limit" label="">
				<aui:input checked="<%= !afterChecked && !onChecked %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="forever" />

				<label><liferay-ui:message key="never" /></label>
			</aui:field-wrapper>

			<aui:field-wrapper cssClass="calendar-portlet-recurrence-limit" label="">
				<aui:input checked="<%= afterChecked %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="day" />

				<label><liferay-ui:message key="after" /></label>

				<aui:input disabled="<%= !afterChecked %>" label="<%= StringPool.BLANK %>"  name="count" size="5" type="text" value="<%= afterChecked ? count : StringPool.BLANK %>" />

				<label><liferay-ui:message key="times" /></label>
			</aui:field-wrapper>

			<aui:field-wrapper cssClass="calendar-portlet-field-date calendar-portlet-recurrence-limit" label="">
				<aui:input checked="<%= onChecked %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="on" />

				<div class="calendar-portlet-field-datepicker clearfix">
					<label><liferay-ui:message key="on" /></label>

					<liferay-ui:input-date
						dayParam="untilDateDay"
						dayValue="<%= untilJCalendar.get(java.util.Calendar.DATE) %>"
						disabled="<%= !onChecked %>"
						monthParam="untilDateMonth"
						monthValue="<%= untilJCalendar.get(java.util.Calendar.MONTH) %>"
						name="untilDate"
						yearParam="untilDateYear"
						yearValue="<%= untilJCalendar.get(java.util.Calendar.YEAR) %>"
					/>
				</div>
			</aui:field-wrapper>
		</div>
	</div>
</div>

<aui:script use="liferay-util-window">
	var countNode = A.one('#<portlet:namespace />count');
	var endsRadioNodes = A.all('[name=<portlet:namespace />ends]');
	var intervalContainerNode = A.one('#<portlet:namespace />intervalContainer');
	var intervalLabelNode = intervalContainerNode.one('#<portlet:namespace />intervalLabel');
	var limitContainerNode = A.one('#<portlet:namespace />limitContainer');
	var recurrenceContainerNode = A.one('#<portlet:namespace />recurrenceContainer');
	var summaryNode = A.one('#<portlet:namespace />summary');

	var untilDateDatePicker = Liferay.component('<%= renderResponse.getNamespace() + HtmlUtil.getAUICompatibleId("untilDateDatePicker") %>');

	var onInputChange = function(event) {
		var target = event.target;

		if (target.get('name') == '<portlet:namespace />frequency') {
			intervalContainerNode.toggleClass('hide', (target.val() == 'NEVER'));
			limitContainerNode.toggleClass('hide', (target.val() == 'NEVER'));
			window.<portlet:namespace />toggleView('<%= Frequency.WEEKLY %>', (target.val() == '<%= Frequency.WEEKLY %>'));
			window.<portlet:namespace />updateInterval(target.val());
		}

		var endValue = endsRadioNodes.filter(':checked').val()[0];

		if ((endValue == 'never') || (endValue == 'on')) {
			countNode.set('disabled', true);
		}
		else {
			countNode.set('disabled', false);
		}

		countNode.selectText();

		if ((endValue == 'never') || (endValue == 'after')) {
			untilDateDatePicker.set('disabled', true);
		}
		else {
			untilDateDatePicker.set('disabled', false);
		}

		window.<portlet:namespace />updateSummaries();
	};

	recurrenceContainerNode.delegate('change', onInputChange, 'select,input');
	recurrenceContainerNode.delegate('keypress', onInputChange, 'select');

	untilDateDatePicker.after(
		'selectionChange',
		function(event) {
			window.<portlet:namespace />updateSummaries();
		}
	);

	window.<portlet:namespace />getSummary = function() {
		var frequencyNode = A.one("input[name=<portlet:namespace/>frequency]:checked");
		var intervalNode = A.one('#<portlet:namespace />interval');
		var weekdays = A.all('#<portlet:namespace />view<%= Frequency.WEEKLY %> input:checked');

		var selectedWeekdays = [];

		if (weekdays.size()) {
			selectedWeekdays = weekdays.getAttribute('data-weekday');
		}

		var endValue = endsRadioNodes.filter(':checked').val()[0];

		var recurrence = {
			count: countNode.val(),
			endValue: endValue,
			frequency: frequencyNode.val(),
			interval: intervalNode.val(),
			untilDate: untilDateDatePicker.getDate(),
			weekdays: selectedWeekdays
		}

		return Liferay.RecurrenceUtil.getSummary(recurrence);
	};

	window.<portlet:namespace />toggleView = function(viewName, show) {
		var viewNode = A.one('#<portlet:namespace />view' + viewName);

		if (viewNode) {
			viewNode.toggle(show);
		}
	};

	window.<portlet:namespace />updateInterval = function(frequency) {

		if (frequency == '<%= Frequency.DAILY %>') {
		        intervalLabelNode.setHTML('<liferay-ui:message key="days" />');
		}
		else if (frequency == '<%= Frequency.WEEKLY %>') {
		        intervalLabelNode.setHTML('<liferay-ui:message key="weeks" />');
		}
		else if (frequency == '<%= Frequency.MONTHLY %>') {
		        intervalLabelNode.setHTML('<liferay-ui:message key="months" />');
		}
		else if (frequency == '<%= Frequency.YEARLY %>') {
		        intervalLabelNode.setHTML('<liferay-ui:message key="years" />');
		}
	};

	window.<portlet:namespace />updateSummary = function(element) {
		var previewNode = A.one(element);

		if (previewNode) {
			previewNode.html(window.<portlet:namespace />getSummary());
		}
	};

	window.<portlet:namespace />updateSummaries = function() {
		window.<portlet:namespace />updateSummary(summaryNode);
	}

	<c:if test="<%= recurring %>">
		window.<portlet:namespace />updateSummaries();
	</c:if>
</aui:script>